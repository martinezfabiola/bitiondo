#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'


require_relative "ast.rb"

class SyntacticError < RuntimeError

	def initialize(token)
		@token = token
	end

	def to_s
		"ERROR: unexpected token '#{@token.type}' at line #{@token.locationinfo[:line]}, column #{@token.locationinfo[:column]}"
	end

end

class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 206)

def initialize(lexer)
    @lexer = lexer
end

def on_error(id, token, stack)
    raise SyntacticError::new(token)
end

def next_token
    if @lexer.has_next_token then
        token = @lexer.next_token;
        return [token.type,token]
    else
        return nil
    end
end

def parse
    do_parse
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    88,    64,   141,    57,    39,   158,   159,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    63,     3,   140,    38,
    69,    69,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,   149,    62,    68,    95,    56,    40,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,   136,    37,    31,   129,
   133,   128,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
    88,   103,    88,    88,    88,    88,    88,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,   131,     4,    46,    47,
    44,    45,    88,    46,    47,    44,    45,    48,    46,    47,
    44,    45,    48,   137,    88,   153,   139,    48,    99,    22,
   143,   155,    43,   154,    67,    51,    50,    43,    60,   nil,
    51,    50,    43,   nil,   nil,    51,    50,   nil,    46,    47,
    44,    45,   nil,   nil,    52,    53,    54,    48,    49,    52,
    53,    54,    88,    49,    52,    53,    54,   nil,    49,    70,
    71,    72,    43,   nil,   nil,    51,    50,    46,    47,    44,
    45,    88,    46,    47,    44,    45,    48,   nil,    70,    71,
    72,    48,   nil,   nil,    52,    53,    54,   nil,    49,   nil,
   nil,    43,   nil,   nil,    51,    50,    43,   nil,    88,    51,
    50,    46,    47,    44,    45,    70,    71,    72,    73,    74,
    48,   nil,   nil,    52,    53,    54,   nil,    49,    52,    53,
    54,   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,
    46,    47,    44,    45,   nil,    46,    47,    44,    45,    48,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,    53,    54,
   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,    43,
   nil,    88,    51,    50,    46,    47,    44,    45,    70,    71,
    72,    73,    74,    48,   nil,   nil,    52,    53,    54,   nil,
    49,    52,    53,    54,   nil,    49,   nil,   nil,    43,   nil,
   nil,    51,    50,    46,    47,    44,    45,   nil,    46,    47,
    44,    45,    48,   nil,   nil,   nil,   nil,    48,   nil,   nil,
    52,    53,    54,   nil,    49,   nil,   nil,    43,   nil,   nil,
    51,    50,    43,   nil,   nil,    51,    50,    46,    47,    44,
    45,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,
    53,    54,   nil,    49,    52,    53,    54,   nil,    49,   nil,
   nil,    43,   nil,   nil,    51,    50,    46,    47,    44,    45,
   nil,    46,    47,    44,    45,    48,   nil,   nil,   nil,   nil,
    48,   nil,   nil,    52,    53,    54,   nil,    49,   nil,   nil,
    43,   nil,   nil,    51,    50,    43,   nil,   nil,    51,    50,
    46,    47,    44,    45,   nil,   nil,   nil,   nil,   nil,    48,
   nil,   nil,    52,    53,    54,   nil,    49,    52,    53,    54,
   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,    46,
    47,    44,    45,   nil,    46,    47,    44,    45,    48,   nil,
   nil,   nil,   nil,    48,   nil,   nil,    52,    53,    54,   nil,
    49,   nil,   nil,    43,   nil,   nil,    51,    50,    43,   nil,
   nil,    51,    50,    46,    47,    44,    45,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,    52,    53,    54,   nil,    49,
    52,    53,    54,   nil,    49,   nil,   nil,    43,   nil,   nil,
    51,    50,    46,    47,    44,    45,   nil,    46,    47,    44,
    45,    48,   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,
    53,    54,   nil,    49,   nil,   nil,    43,   nil,   nil,    51,
    50,    43,   nil,   nil,    51,    50,    46,    47,    44,    45,
   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,    53,
    54,   nil,    49,    52,    53,    54,   nil,    49,   nil,   nil,
    43,   nil,   nil,    51,    50,    46,    47,    44,    45,   nil,
    46,    47,    44,    45,    48,   nil,   nil,   nil,   nil,    48,
   nil,   nil,    52,    53,    54,   nil,    49,   nil,   nil,    43,
   nil,   nil,    51,    50,    43,   nil,   nil,    51,    50,    46,
    47,    44,    45,   nil,   nil,   nil,   nil,   nil,    48,   nil,
   nil,    52,    53,    54,   nil,    49,    52,    53,    54,   nil,
    49,   nil,   nil,    43,   nil,   nil,    51,    50,    46,    47,
    44,    45,   nil,    46,    47,    44,    45,    48,   nil,   nil,
   nil,   nil,    48,   nil,   nil,    52,    53,    54,   nil,    49,
   nil,   nil,    43,   nil,   nil,    51,    50,    43,   nil,   nil,
    51,    50,    46,    47,    44,    45,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    52,    53,    54,   nil,    49,    52,
    53,    54,   nil,    49,   nil,   nil,    43,   nil,   nil,    51,
    50,    46,    47,    44,    45,   nil,    46,    47,    44,    45,
    48,   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,    53,
    54,   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,
    43,   nil,   nil,    51,    50,    46,    47,    44,    45,   nil,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,    53,    54,
   nil,    49,    52,    53,    54,   nil,    49,   nil,   nil,    43,
   nil,   nil,    51,    50,    46,    47,    44,    45,   nil,    46,
    47,    44,    45,    48,   nil,   nil,   nil,   nil,    48,   nil,
   nil,    52,    53,    54,   nil,    49,   nil,   nil,    43,   nil,
   nil,    51,    50,    43,   nil,   nil,    51,    50,    46,    47,
    44,    45,   nil,   nil,   nil,   nil,   nil,    48,   nil,   nil,
    52,    53,    54,   nil,    49,    52,    53,    54,   nil,    49,
   nil,   nil,    43,   nil,   nil,    51,    50,    46,    47,    44,
    45,   nil,    46,    47,    44,    45,    48,   nil,   nil,   nil,
   nil,    48,   nil,   nil,    52,    53,    54,   nil,    49,   nil,
   nil,    43,   nil,   nil,    51,    50,    43,   nil,   nil,    51,
    50,    46,    47,    44,    45,   nil,   nil,   nil,   nil,   nil,
    48,   nil,   nil,    52,    53,    54,   nil,    49,    52,    53,
    54,   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,
    46,    47,    44,    45,   nil,    46,    47,    44,    45,    48,
   nil,   nil,   nil,   nil,    48,   nil,   nil,    52,    53,    54,
   nil,    49,   nil,   nil,    43,   nil,   nil,    51,    50,    43,
   nil,   nil,    51,    50,    46,    47,    44,    45,   nil,   nil,
   nil,   nil,   nil,    48,   nil,   nil,    52,    53,    54,   nil,
    49,    52,    53,    54,   nil,    49,   nil,   nil,    43,   nil,
   nil,    51,    50,    46,    47,    44,    45,   nil,   nil,   nil,
   nil,   nil,    48,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    52,    53,    54,   nil,    49,    88,   nil,    43,   nil,   nil,
    51,    50,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    81,    82,    83,    84,    88,   nil,    52,
    53,    54,   nil,    49,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,   nil,   nil,   nil,   nil,   152,    70,    71,    72,
    73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
    83,    84,    85,    86,    87,   nil,   nil,   nil,   nil,   nil,
   nil,    88,   nil,   nil,   nil,   nil,   nil,    98,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,   nil,   125,   nil,
   nil,   nil,   nil,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,   nil,   126,   nil,   nil,   nil,   nil,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,   nil,   151,   nil,
   nil,   nil,   nil,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,   nil,   130,   nil,   nil,   nil,   nil,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,   104,   146,   nil,
   nil,   nil,   nil,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,   nil,   nil,   nil,   nil,   nil,   nil,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,   132,   nil,   nil,
   nil,   nil,   nil,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,   134,   nil,   nil,   nil,   nil,   nil,    70,    71,
    72,    73,    74,    75,    76,    77,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,     3,     7,    26,   nil,
    27,    28,   nil,   nil,   nil,   nil,   nil,    30,   nil,    29,
    23,    24,    25,   nil,   nil,   nil,   nil,    22,    11,    10,
    12,     3,    33,    26,   nil,    27,    28,   nil,   nil,   nil,
   nil,   nil,    30,   nil,    29,    23,    24,    25,   nil,    88,
   nil,   nil,    22,    11,    10,    12,    70,    71,    72,    73,
    74,    75,    76,    77,    78,    79,    80,    81,    82,    83,
    84,    85,    86,    87,    88,   nil,   nil,   nil,   nil,   nil,
   nil,    70,    71,    72,    73,    74,    75,    76,    77,    78,
    79,    80,    81,    82,    83,    84,    85,    86,    88,   nil,
   nil,   nil,   nil,   nil,   nil,    70,    71,    72,    73,    74,
    75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
    85,     3,   nil,    26,   nil,    27,    28,   nil,   nil,   nil,
   nil,   nil,    30,   nil,    29,    23,    24,    25,   nil,     3,
    35,    26,    22,    27,    28,   nil,   nil,   nil,   nil,   nil,
    30,   nil,    29,    23,    24,    25,   nil,     3,   nil,    26,
    22,    27,    28,   nil,   nil,   nil,   nil,   nil,    30,   nil,
    29,    23,    24,    25,   nil,     3,    61,    26,    22,    27,
    28,   nil,   nil,   nil,   nil,   nil,    30,   nil,    29,    23,
    24,    25,   nil,     3,   nil,    26,    22,    27,    28,   nil,
   nil,   nil,   nil,   nil,    30,   nil,    29,    23,    24,    25,
   nil,     3,   nil,    26,    22,    27,    28,   nil,   nil,   nil,
   nil,   nil,    30,   nil,    29,    23,    24,    25,   nil,     3,
   nil,    26,    22,    27,    28,   nil,   nil,   nil,   nil,   nil,
    30,   nil,    29,    23,    24,    25,   nil,     3,   nil,    26,
    22,    27,    28,   nil,   nil,   nil,   nil,   nil,    30,   nil,
    29,    23,    24,    25,   nil,     3,   nil,    26,    22,    27,
    28,   nil,   nil,   nil,   nil,   nil,    30,   nil,    29,    23,
    24,    25,    88,   nil,   nil,   nil,    22,   nil,   nil,    70,
    71,    72,    73,    74,    75,    76,    77,    78,    79,    80,
    81,    82,    83,    88,   nil,   nil,   nil,   nil,   nil,   nil,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    81,    82,    88,   nil,   nil,   nil,   nil,   nil,   nil,
    70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
    80,    88,   nil,   nil,   nil,   nil,   nil,   nil,    70,    71,
    72,    73,    74,    75,    76,   -72,   -72,   -72,   -72,    88,
   nil,   nil,   nil,   nil,   nil,   nil,    70,    71,    72,    73,
    74,    75,    76,   -72,   -72,   -72,   -72,    88,   nil,   nil,
   nil,   nil,   nil,   nil,    70,    71,    72,    73,    74,    75,
    76,   -72,   -72,   -72,   -72,    88,   nil,   nil,   nil,   nil,
   nil,   nil,    70,    71,    72,    73,    74,    75,    76,    77,
    78,    79,    80,    88,   nil,   nil,   nil,   nil,   nil,   nil,
    70,    71,    72,    73,    74,    75,    76,   -72,   -72,   -72,
   -72 ]

racc_action_check = [
   142,    37,   132,    27,    22,   152,   152,   142,   142,   142,
   142,   142,   142,   142,   142,   142,   142,   142,   142,   142,
   142,   142,   142,   142,   142,   127,    37,     0,   132,    22,
    41,    55,   127,   127,   127,   127,   127,   127,   127,   127,
   127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
    65,   142,    37,    41,    55,    26,    23,    65,    65,    65,
    65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,   101,   127,     9,     4,    99,
   104,    98,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   101,   101,
   148,    65,   106,   107,   108,    94,    93,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,    92,   101,     1,    97,    97,
    97,    97,    91,    70,    70,    70,    70,    97,    71,    71,
    71,    71,    70,   128,    90,   146,   130,    71,    59,    57,
   135,   148,    97,   146,    40,    97,    97,    70,    30,   nil,
    70,    70,    71,   nil,   nil,    71,    71,   nil,    72,    72,
    72,    72,   nil,   nil,    97,    97,    97,    72,    97,    70,
    70,    70,   109,    70,    71,    71,    71,   nil,    71,   109,
   109,   109,    72,   nil,   nil,    72,    72,    73,    73,    73,
    73,   110,    74,    74,    74,    74,    73,   nil,   110,   110,
   110,    74,   nil,   nil,    72,    72,    72,   nil,    72,   nil,
   nil,    73,   nil,   nil,    73,    73,    74,   nil,   111,    74,
    74,    75,    75,    75,    75,   111,   111,   111,   111,   111,
    75,   nil,   nil,    73,    73,    73,   nil,    73,    74,    74,
    74,   nil,    74,   nil,   nil,    75,   nil,   nil,    75,    75,
    76,    76,    76,    76,   nil,    77,    77,    77,    77,    76,
   nil,   nil,   nil,   nil,    77,   nil,   nil,    75,    75,    75,
   nil,    75,   nil,   nil,    76,   nil,   nil,    76,    76,    77,
   nil,   112,    77,    77,    78,    78,    78,    78,   112,   112,
   112,   112,   112,    78,   nil,   nil,    76,    76,    76,   nil,
    76,    77,    77,    77,   nil,    77,   nil,   nil,    78,   nil,
   nil,    78,    78,    79,    79,    79,    79,   nil,    80,    80,
    80,    80,    79,   nil,   nil,   nil,   nil,    80,   nil,   nil,
    78,    78,    78,   nil,    78,   nil,   nil,    79,   nil,   nil,
    79,    79,    80,   nil,   nil,    80,    80,    81,    81,    81,
    81,   nil,   nil,   nil,   nil,   nil,    81,   nil,   nil,    79,
    79,    79,   nil,    79,    80,    80,    80,   nil,    80,   nil,
   nil,    81,   nil,   nil,    81,    81,    82,    82,    82,    82,
   nil,    83,    83,    83,    83,    82,   nil,   nil,   nil,   nil,
    83,   nil,   nil,    81,    81,    81,   nil,    81,   nil,   nil,
    82,   nil,   nil,    82,    82,    83,   nil,   nil,    83,    83,
    84,    84,    84,    84,   nil,   nil,   nil,   nil,   nil,    84,
   nil,   nil,    82,    82,    82,   nil,    82,    83,    83,    83,
   nil,    83,   nil,   nil,    84,   nil,   nil,    84,    84,    85,
    85,    85,    85,   nil,    86,    86,    86,    86,    85,   nil,
   nil,   nil,   nil,    86,   nil,   nil,    84,    84,    84,   nil,
    84,   nil,   nil,    85,   nil,   nil,    85,    85,    86,   nil,
   nil,    86,    86,    87,    87,    87,    87,   nil,   nil,   nil,
   nil,   nil,    87,   nil,   nil,    85,    85,    85,   nil,    85,
    86,    86,    86,   nil,    86,   nil,   nil,    87,   nil,   nil,
    87,    87,    88,    88,    88,    88,   nil,   129,   129,   129,
   129,    88,   nil,   nil,   nil,   nil,   129,   nil,   nil,    87,
    87,    87,   nil,    87,   nil,   nil,    88,   nil,   nil,    88,
    88,   129,   nil,   nil,   129,   129,    24,    24,    24,    24,
   nil,   nil,   nil,   nil,   nil,    24,   nil,   nil,    88,    88,
    88,   nil,    88,   129,   129,   129,   nil,   129,   nil,   nil,
    24,   nil,   nil,    24,    24,    25,    25,    25,    25,   nil,
   141,   141,   141,   141,    25,   nil,   nil,   nil,   nil,   141,
   nil,   nil,    24,    24,    24,   nil,    24,   nil,   nil,    25,
   nil,   nil,    25,    25,   141,   nil,   nil,   141,   141,    28,
    28,    28,    28,   nil,   nil,   nil,   nil,   nil,    28,   nil,
   nil,    25,    25,    25,   nil,    25,   141,   141,   141,   nil,
   141,   nil,   nil,    28,   nil,   nil,    28,    28,   137,   137,
   137,   137,   nil,    38,    38,    38,    38,   137,   nil,   nil,
   nil,   nil,    38,   nil,   nil,    28,    28,    28,   nil,    28,
   nil,   nil,   137,   nil,   nil,   137,   137,    38,   nil,   nil,
    38,    38,    39,    39,    39,    39,   nil,   nil,   nil,   nil,
   nil,    39,   nil,   nil,   137,   137,   137,   nil,   137,    38,
    38,    38,   nil,    38,   nil,   nil,    39,   nil,   nil,    39,
    39,   136,   136,   136,   136,   nil,    43,    43,    43,    43,
   136,   nil,   nil,   nil,   nil,    43,   nil,   nil,    39,    39,
    39,   nil,    39,   nil,   nil,   136,   nil,   nil,   136,   136,
    43,   nil,   nil,    43,    43,    44,    44,    44,    44,   nil,
   nil,   nil,   nil,   nil,    44,   nil,   nil,   136,   136,   136,
   nil,   136,    43,    43,    43,   nil,    43,   nil,   nil,    44,
   nil,   nil,    44,    44,    45,    45,    45,    45,   nil,    46,
    46,    46,    46,    45,   nil,   nil,   nil,   nil,    46,   nil,
   nil,    44,    44,    44,   nil,    44,   nil,   nil,    45,   nil,
   nil,    45,    45,    46,   nil,   nil,    46,    46,    47,    47,
    47,    47,   nil,   nil,   nil,   nil,   nil,    47,   nil,   nil,
    45,    45,    45,   nil,    45,    46,    46,    46,   nil,    46,
   nil,   nil,    47,   nil,   nil,    47,    47,    48,    48,    48,
    48,   nil,    56,    56,    56,    56,    48,   nil,   nil,   nil,
   nil,    56,   nil,   nil,    47,    47,    47,   nil,    47,   nil,
   nil,    48,   nil,   nil,    48,    48,    56,   nil,   nil,    56,
    56,   133,   133,   133,   133,   nil,   nil,   nil,   nil,   nil,
   133,   nil,   nil,    48,    48,    48,   nil,    48,    56,    56,
    56,   nil,    56,   nil,   nil,   133,   nil,   nil,   133,   133,
    60,    60,    60,    60,   nil,    63,    63,    63,    63,    60,
   nil,   nil,   nil,   nil,    63,   nil,   nil,   133,   133,   133,
   nil,   133,   nil,   nil,    60,   nil,   nil,    60,    60,    63,
   nil,   nil,    63,    63,    64,    64,    64,    64,   nil,   nil,
   nil,   nil,   nil,    64,   nil,   nil,    60,    60,    60,   nil,
    60,    63,    63,    63,   nil,    63,   nil,   nil,    64,   nil,
   nil,    64,    64,    69,    69,    69,    69,   nil,   nil,   nil,
   nil,   nil,    69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    64,    64,    64,   nil,    64,   121,   nil,    69,   nil,   nil,
    69,    69,   121,   121,   121,   121,   121,   121,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   145,   nil,    69,
    69,    69,   nil,    69,   145,   145,   145,   145,   145,   145,
   145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
   145,   145,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    58,   nil,   nil,   nil,   nil,   nil,   145,    58,    58,    58,
    58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
    58,    58,    58,    58,    58,   nil,   nil,   nil,   nil,   nil,
   nil,    89,   nil,   nil,   nil,   nil,   nil,    58,    89,    89,
    89,    89,    89,    89,    89,    89,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    96,   nil,    89,   nil,
   nil,   nil,   nil,    96,    96,    96,    96,    96,    96,    96,
    96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
    96,   144,   nil,    96,   nil,   nil,   nil,   nil,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   100,   nil,   144,   nil,
   nil,   nil,   nil,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   138,   nil,   100,   nil,   nil,   nil,   nil,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,    66,    66,   138,   nil,
   nil,   nil,   nil,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
    66,   105,   nil,   nil,   nil,   nil,   nil,   nil,   105,   105,
   105,   105,   105,   105,   105,   105,   105,   105,   105,   105,
   105,   105,   105,   105,   105,   105,   102,   102,   nil,   nil,
   nil,   nil,   nil,   102,   102,   102,   102,   102,   102,   102,
   102,   102,   102,   102,   102,   102,   102,   102,   102,   102,
   102,   124,   124,   nil,   nil,   nil,   nil,   nil,   124,   124,
   124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
   124,   124,   124,   124,   124,   124,     3,     3,     3,   nil,
     3,     3,   nil,   nil,   nil,   nil,   nil,     3,   nil,     3,
     3,     3,     3,   nil,   nil,   nil,   nil,     3,     3,     3,
     3,     5,     5,     5,   nil,     5,     5,   nil,   nil,   nil,
   nil,   nil,     5,   nil,     5,     5,     5,     5,   nil,    42,
   nil,   nil,     5,     5,     5,     5,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,   123,   nil,   nil,   nil,   nil,   nil,
   nil,   123,   123,   123,   123,   123,   123,   123,   123,   123,
   123,   123,   123,   123,   123,   123,   123,   123,   122,   nil,
   nil,   nil,   nil,   nil,   nil,   122,   122,   122,   122,   122,
   122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
   122,   157,   nil,   157,   nil,   157,   157,   nil,   nil,   nil,
   nil,   nil,   157,   nil,   157,   157,   157,   157,   nil,     6,
     6,     6,   157,     6,     6,   nil,   nil,   nil,   nil,   nil,
     6,   nil,     6,     6,     6,     6,   nil,    29,   nil,    29,
     6,    29,    29,   nil,   nil,   nil,   nil,   nil,    29,   nil,
    29,    29,    29,    29,   nil,    32,    32,    32,    29,    32,
    32,   nil,   nil,   nil,   nil,   nil,    32,   nil,    32,    32,
    32,    32,   nil,   126,   nil,   126,    32,   126,   126,   nil,
   nil,   nil,   nil,   nil,   126,   nil,   126,   126,   126,   126,
   nil,   139,   nil,   139,   126,   139,   139,   nil,   nil,   nil,
   nil,   nil,   139,   nil,   139,   139,   139,   139,   nil,   143,
   nil,   143,   139,   143,   143,   nil,   nil,   nil,   nil,   nil,
   143,   nil,   143,   143,   143,   143,   nil,   151,   nil,   151,
   143,   151,   151,   nil,   nil,   nil,   nil,   nil,   151,   nil,
   151,   151,   151,   151,   nil,   153,   nil,   153,   151,   153,
   153,   nil,   nil,   nil,   nil,   nil,   153,   nil,   153,   153,
   153,   153,   120,   nil,   nil,   nil,   153,   nil,   nil,   120,
   120,   120,   120,   120,   120,   120,   120,   120,   120,   120,
   120,   120,   120,   119,   nil,   nil,   nil,   nil,   nil,   nil,
   119,   119,   119,   119,   119,   119,   119,   119,   119,   119,
   119,   119,   119,   118,   nil,   nil,   nil,   nil,   nil,   nil,
   118,   118,   118,   118,   118,   118,   118,   118,   118,   118,
   118,   113,   nil,   nil,   nil,   nil,   nil,   nil,   113,   113,
   113,   113,   113,   113,   113,   113,   113,   113,   113,   114,
   nil,   nil,   nil,   nil,   nil,   nil,   114,   114,   114,   114,
   114,   114,   114,   114,   114,   114,   114,   116,   nil,   nil,
   nil,   nil,   nil,   nil,   116,   116,   116,   116,   116,   116,
   116,   116,   116,   116,   116,   117,   nil,   nil,   nil,   nil,
   nil,   nil,   117,   117,   117,   117,   117,   117,   117,   117,
   117,   117,   117,   115,   nil,   nil,   nil,   nil,   nil,   nil,
   115,   115,   115,   115,   115,   115,   115,   115,   115,   115,
   115 ]

racc_action_pointer = [
    -6,   127,   nil,  1253,    78,  1278,  1386,   nil,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,     2,   542,   571,    27,   -25,   605,  1404,
   130,   nil,  1422,   nil,   nil,   nil,   nil,    -1,   639,   668,
   101,     0,  1327,   702,   731,   760,   765,   794,   823,   nil,
   nil,   nil,   nil,   nil,   nil,     1,   828,    95,  1028,   104,
   886,   nil,   nil,   891,   920,    48,  1184,   nil,   nil,   949,
   129,   134,   164,   193,   198,   227,   256,   261,   290,   319,
   324,   353,   382,   387,   416,   445,   450,   479,   508,  1059,
   142,   130,   123,   104,   103,   nil,  1084,   124,    27,    51,
  1134,    73,  1234,   nil,    53,  1209,   100,   101,   102,   180,
   199,   226,   289,  1619,  1637,  1691,  1655,  1673,  1601,  1581,
  1560,   973,  1376,  1352,  1259,   nil,  1440,    23,   103,   513,
   101,   nil,   -25,   857,   nil,   114,   697,   634,  1159,  1458,
   nil,   576,    -2,  1476,  1109,   995,   100,   nil,    98,   nil,
   nil,  1494,   -37,  1512,   nil,   nil,   nil,  1368,   nil,   nil,
   nil,   nil ]

racc_action_default = [
   -72,   -72,    -1,   -72,   -72,   -72,   -72,    -5,    -7,   -72,
   -12,   -13,   -14,   -16,   -17,   -18,   -19,   -20,   -21,   -22,
   -23,   -24,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   162,   -72,    -3,    -6,    -4,   -15,   -72,   -72,   -72,
   -72,   -72,   -31,   -72,   -72,   -72,   -72,   -72,   -72,   -65,
   -66,   -67,   -68,   -69,   -70,   -72,   -72,   -72,   -72,   -72,
   -72,    -2,    -8,   -72,   -72,   -72,   -72,   -27,   -28,   -72,
   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,   -72,
   -60,   -61,   -62,   -63,   -64,   -29,   -72,   -72,   -72,   -72,
   -72,   -72,   -72,   -25,   -72,   -30,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -56,   -57,   -58,   -59,   -72,   -41,   -72,   -72,   -72,   -72,
   -72,    -9,   -72,   -72,   -71,   -32,   -72,   -72,   -72,   -72,
   -10,   -72,   -72,   -72,   -72,   -72,   -72,   -39,   -72,   -26,
   -33,   -72,   -72,   -72,   -40,   -11,   -34,   -72,   -36,   -37,
   -38,   -35 ]

racc_goto_table = [
    36,    58,     6,     8,    32,    34,    41,    55,   157,     2,
     5,    65,    66,    97,     1,   nil,    89,    90,    91,    92,
    93,    94,   nil,    59,   nil,   nil,    36,   nil,   nil,    96,
   nil,   nil,   nil,   100,   nil,   nil,   101,   102,   nil,   nil,
   nil,   nil,   105,   106,   107,   108,   109,   110,   111,   112,
   113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
   123,   124,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   127,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   138,   nil,   nil,   nil,   142,   nil,   nil,   144,
   145,   nil,   nil,   nil,   148,   nil,   nil,   nil,   nil,   nil,
   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   147,   nil,   nil,   nil,   150,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   156,   nil,   160,   nil,   nil,
   nil,   161 ]

racc_goto_check = [
     8,     7,     4,     5,     4,     5,    16,    16,    17,     2,
     3,     7,     7,     9,     1,   nil,     7,     7,     7,     7,
     7,     7,   nil,     8,   nil,   nil,     8,   nil,   nil,     7,
   nil,   nil,   nil,     7,   nil,   nil,     7,     7,   nil,   nil,
   nil,   nil,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     7,   nil,   nil,   nil,     7,   nil,   nil,     7,
     7,   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,
     8,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     8,   nil,   nil,   nil,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,     8,   nil,   nil,
   nil,     8 ]

racc_goto_pointer = [
   nil,    14,     9,     7,    -1,     0,   nil,   -27,    -6,   -44,
   nil,   nil,   nil,   nil,   nil,   nil,   -18,  -144 ]

racc_goto_default = [
   nil,   nil,    14,   nil,   nil,   nil,     9,    42,    13,    15,
    16,    17,    18,    19,    20,    21,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 59, :_reduce_1,
  4, 60, :_reduce_2,
  3, 60, :_reduce_3,
  3, 60, :_reduce_4,
  2, 60, :_reduce_5,
  2, 61, :_reduce_6,
  1, 61, :_reduce_7,
  3, 63, :_reduce_8,
  5, 63, :_reduce_9,
  6, 63, :_reduce_10,
  8, 63, :_reduce_11,
  1, 64, :_reduce_12,
  1, 64, :_reduce_13,
  1, 64, :_reduce_14,
  2, 62, :_reduce_15,
  1, 62, :_reduce_16,
  1, 66, :_reduce_17,
  1, 66, :_reduce_18,
  1, 66, :_reduce_19,
  1, 66, :_reduce_20,
  1, 66, :_reduce_21,
  1, 66, :_reduce_22,
  1, 66, :_reduce_23,
  1, 66, :_reduce_24,
  4, 67, :_reduce_25,
  7, 67, :_reduce_26,
  3, 68, :_reduce_27,
  3, 69, :_reduce_28,
  3, 69, :_reduce_29,
  3, 74, :_reduce_30,
  1, 74, :_reduce_31,
  5, 70, :_reduce_32,
  7, 70, :_reduce_33,
  8, 71, :_reduce_34,
  9, 72, :_reduce_35,
  1, 75, :_reduce_36,
  1, 75, :_reduce_37,
  8, 73, :_reduce_38,
  6, 73, :_reduce_39,
  7, 73, :_reduce_40,
  3, 65, :_reduce_41,
  3, 65, :_reduce_42,
  3, 65, :_reduce_43,
  3, 65, :_reduce_44,
  3, 65, :_reduce_45,
  3, 65, :_reduce_46,
  3, 65, :_reduce_47,
  3, 65, :_reduce_48,
  3, 65, :_reduce_49,
  3, 65, :_reduce_50,
  3, 65, :_reduce_51,
  3, 65, :_reduce_52,
  3, 65, :_reduce_53,
  3, 65, :_reduce_54,
  3, 65, :_reduce_55,
  3, 65, :_reduce_56,
  3, 65, :_reduce_57,
  3, 65, :_reduce_58,
  3, 65, :_reduce_59,
  2, 65, :_reduce_60,
  2, 65, :_reduce_61,
  2, 65, :_reduce_62,
  2, 65, :_reduce_63,
  2, 65, :_reduce_64,
  1, 65, :_reduce_65,
  1, 65, :_reduce_66,
  1, 65, :_reduce_67,
  1, 65, :_reduce_68,
  1, 65, :_reduce_69,
  1, 65, :_reduce_70,
  4, 65, :_reduce_71 ]

racc_reduce_n = 72

racc_shift_n = 162

racc_token_table = {
  false => 0,
  :error => 1,
  "[" => 2,
  "]" => 3,
  "$" => 4,
  "@" => 5,
  "!" => 6,
  "~" => 7,
  :UMINUS => 8,
  "*" => 9,
  "/" => 10,
  "%" => 11,
  "+" => 12,
  "-" => 13,
  "<<" => 14,
  ">>" => 15,
  "<" => 16,
  "<=" => 17,
  ">" => 18,
  ">=" => 19,
  "==" => 20,
  "!=" => 21,
  "&" => 22,
  "^" => 23,
  "|" => 24,
  "&&" => 25,
  "||" => 26,
  "=" => 27,
  "(" => 28,
  ")" => 29,
  "," => 30,
  "bitexpr" => 31,
  "integer" => 32,
  "begin" => 33,
  "end" => 34,
  "if" => 35,
  "else" => 36,
  "for" => 37,
  "forbits" => 38,
  "as" => 39,
  "from" => 40,
  "going" => 41,
  "higher" => 42,
  "lower" => 43,
  "while" => 44,
  "do" => 45,
  "repeat" => 46,
  "input" => 47,
  "output" => 48,
  "outputln" => 49,
  "true" => 50,
  "false" => 51,
  "string" => 52,
  ";" => 53,
  "identifier" => 54,
  "bool" => 55,
  "int" => 56,
  "bits" => 57 }

racc_nt_base = 58

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"[\"",
  "\"]\"",
  "\"$\"",
  "\"@\"",
  "\"!\"",
  "\"~\"",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\"<\"",
  "\"<=\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "\"&\"",
  "\"^\"",
  "\"|\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\"(\"",
  "\")\"",
  "\",\"",
  "\"bitexpr\"",
  "\"integer\"",
  "\"begin\"",
  "\"end\"",
  "\"if\"",
  "\"else\"",
  "\"for\"",
  "\"forbits\"",
  "\"as\"",
  "\"from\"",
  "\"going\"",
  "\"higher\"",
  "\"lower\"",
  "\"while\"",
  "\"do\"",
  "\"repeat\"",
  "\"input\"",
  "\"output\"",
  "\"outputln\"",
  "\"true\"",
  "\"false\"",
  "\"string\"",
  "\";\"",
  "\"identifier\"",
  "\"bool\"",
  "\"int\"",
  "\"bits\"",
  "$start",
  "S",
  "BLOCK",
  "STATEMENTS",
  "INSTRUCTIONS",
  "STATEMENT",
  "TYPE",
  "EXPRESSION",
  "INSTRUCTION",
  "ASSIGNATION",
  "INPUT",
  "OUT",
  "CONDITIONAL",
  "FOR",
  "FORBITS",
  "WHILE",
  "EXPRESSIONS",
  "DIRECTION" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_1(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_2(val, _values, result)
    result = BlockNode.new(val[1], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_3(val, _values, result)
    result = BlockNode.new(val[1], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_4(val, _values, result)
    result = BlockNode.new(nil, val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_5(val, _values, result)
    result = BlockNode.new(nil, nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_6(val, _values, result)
    result = StatementsNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 61)
  def _reduce_7(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 66)
  def _reduce_8(val, _values, result)
    result = StatementNode.new(val[0], val[1], nil, nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 67)
  def _reduce_9(val, _values, result)
    result = StatementNode.new(val[0], val[1], val[3], nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_10(val, _values, result)
    result = StatementNode.new(val[0], val[1], nil, val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_11(val, _values, result)
    result = StatementNode.new(val[0], val[1], val[6], val[3])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_12(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_13(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_14(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 81)
  def _reduce_15(val, _values, result)
    result = InstructionsNode.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 82)
  def _reduce_16(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 87)
  def _reduce_17(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_18(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_19(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_20(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_21(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_22(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 93)
  def _reduce_23(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 94)
  def _reduce_24(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 99)
  def _reduce_25(val, _values, result)
    result = AssignationNode.new(val[0], nil, val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_26(val, _values, result)
    result = AssignationNode.new(val[0], val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 105)
  def _reduce_27(val, _values, result)
    result = InputNode.new(val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 110)
  def _reduce_28(val, _values, result)
    result = OutputNode.new('OUTPUT', val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 111)
  def _reduce_29(val, _values, result)
    result = OutputNode.new('OUTPUTLN', val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 116)
  def _reduce_30(val, _values, result)
    result = ExpressionsNode.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 117)
  def _reduce_31(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 123)
  def _reduce_32(val, _values, result)
    result = ConditionalNode.new(val[2], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 124)
  def _reduce_33(val, _values, result)
    result = ConditionalNode.new(val[2], val[4], val[6])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 129)
  def _reduce_34(val, _values, result)
    result = ForLoopNode.new(val[2], val[3], val[5], val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 134)
  def _reduce_35(val, _values, result)
    result = ForbitsLoopNode.new(val[1], val[3], val[5], val[7], val[8])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 139)
  def _reduce_36(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 140)
  def _reduce_37(val, _values, result)
    result = val[0]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 145)
  def _reduce_38(val, _values, result)
    result = RepeatWhileLoopNode.new(val[1], val[4], val[7])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 146)
  def _reduce_39(val, _values, result)
    result = WhileLoopNode.new(val[2], val[5])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 147)
  def _reduce_40(val, _values, result)
    result = RepeatWhileLoopNode.new(val[1], val[4])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 153)
  def _reduce_41(val, _values, result)
    result = val[1]
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 154)
  def _reduce_42(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'MULTIPLICATION')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 155)
  def _reduce_43(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'DIVISION')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 156)
  def _reduce_44(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'MODULUS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 157)
  def _reduce_45(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'PLUS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 158)
  def _reduce_46(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'MINUS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 159)
  def _reduce_47(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'LEFTSHIFT')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 160)
  def _reduce_48(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'RIGHTSHIFT')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 161)
  def _reduce_49(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'LESSTHAN')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 162)
  def _reduce_50(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'LESSTHANEQUAL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 163)
  def _reduce_51(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'GREATERTHAN')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 164)
  def _reduce_52(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'GREATERTHANEQUAL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 165)
  def _reduce_53(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ISEQUAL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 166)
  def _reduce_54(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ISNOTEQUAL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 167)
  def _reduce_55(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ANDBITS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 168)
  def _reduce_56(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'EXCLUSIVE')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 169)
  def _reduce_57(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ORBITS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 170)
  def _reduce_58(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ANDBOOL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 171)
  def _reduce_59(val, _values, result)
    result = BinExpressionNode.new(val[0], val[2], 'ORBOOL')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 172)
  def _reduce_60(val, _values, result)
    result = UnaryExpressionNode.new(val[1], 'NOT')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 173)
  def _reduce_61(val, _values, result)
    result = UnaryExpressionNode.new(val[1], 'NOTBITS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 174)
  def _reduce_62(val, _values, result)
    result = UnaryExpressionNode.new(val[1], 'BITREPRESENTATION')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 175)
  def _reduce_63(val, _values, result)
    result = UnaryExpressionNode.new(val[1], 'TRANSFORM')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 176)
  def _reduce_64(val, _values, result)
    result = UnaryExpressionNode.new(val[1], 'UMINUS')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 177)
  def _reduce_65(val, _values, result)
    result = ConstExpressionNode.new(val[0], "variable")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 178)
  def _reduce_66(val, _values, result)
    result = ConstExpressionNode.new(val[0], "int")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 179)
  def _reduce_67(val, _values, result)
    result = ConstExpressionNode.new(val[0], "bits")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 180)
  def _reduce_68(val, _values, result)
    result = ConstExpressionNode.new(val[0], "bool")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 181)
  def _reduce_69(val, _values, result)
    result = ConstExpressionNode.new(val[0], "bool")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 182)
  def _reduce_70(val, _values, result)
    result = ConstExpressionNode.new(val[0], "string")
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 183)
  def _reduce_71(val, _values, result)
    result = AccessNode.new(val[0], val[2])
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
